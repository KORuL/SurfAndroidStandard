import ru.surfstudio.android.build.tasks.*
import ru.surfstudio.android.build.tasks.check_dependencies_stable.*

task checkStandardDependenciesStableTask(type: CheckStandardDependenciesStableTask)

task checkStableComponentStandardDependenciesStableTask(type: CheckStableComponentStandardDependenciesStableTask)

task checkExistingDependencyArtifactsInArtifactory(type: CheckExistingDependencyArtifactsInArtifactoryTask)

task checkExistingDependencyArtifactsInBintray(type: CheckExistingDependencyArtifactsInBintrayTask)

task checkDependencyForComponentUnstableTask(type: CheckDependencyForComponentUnstableTask)

task checkStableComponentsChanged(type: CheckStableComponentsChangedTask)

task createProjectConfiguration(type: CreateProjectConfigurationTask)

task runCreateProjectConfigurationFromTemp(type: GradleBuild) {
    dir = file('./temp')
    tasks = ['CreateProjectConfiguration']
    doFirst {
        def pathToProject = null
        def revision = null
        if (project.hasProperty('pathToProject')) {
            pathToProject = project.findProperty('pathToProject')
        } else {
            throw new GradleException("No arguments found")
        }
        if (project.hasProperty('revision')) {
            revision = project.findProperty('revision')
        } else {
            throw new GradleException("No arguments found")
        }
        startParameter.projectProperties = [pathToProject: pathToProject, revision: revision]
    }
}

task incrementUnstableChangedComponents(type: IncrementUnstableChangedComponentsTask)

task checkSameDependencyArtifactsInArtifactory(type: CheckSameDependencyArtifactsInArtifactoryTask)

task checkSameDependencyArtifactsInBintray(type: CheckSameDependencyArtifactsInBintrayTask)

task CheckUnstableToStableChanged(type: CheckUnstableToStableChangedTask)

task checkComponentStableTask(type: CheckComponentStableTask)
