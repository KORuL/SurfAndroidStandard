import ru.surfstudio.android.build.Components
import ru.surfstudio.android.build.tasks.*
import ru.surfstudio.android.build.tasks.artifactory_tasks.*
import ru.surfstudio.android.build.tasks.bintray_tasks.*
import ru.surfstudio.android.build.tasks.bintray_tasks.release.*
import ru.surfstudio.android.build.tasks.check_configuration.*
import ru.surfstudio.android.build.tasks.check_stable_artifacts_exist_in_repositories.*
import ru.surfstudio.android.build.tasks.check_dependencies_stable.*
import ru.surfstudio.android.build.tasks.check_release_notes.*
import ru.surfstudio.android.build.tasks.check_stability.*
import ru.surfstudio.android.build.tasks.deploy_to_mirror.*
import ru.surfstudio.android.build.tasks.generate_release_notes_diff.*
import ru.surfstudio.android.build.tasks.increment_version.*

task checkComponentDependenciesAreStable(type: CheckComponentDependenciesAreStableTask) // release

task checkStableModuleDependenciesAreAlsoStable(type: CheckStableModuleDependenciesAreAlsoStableTask) // pr

task checkDependenciesArtifactExistsInArtifactoryTask(type: CheckDependenciesArtifactExistsInArtifactoryTask) // release

task checkDependenciesArtifactExistsInBintrayTask(type: CheckDependenciesArtifactExistsInBintrayTask) // release

task checkDependencyForComponentUnstable(type: CheckDependencyForComponentUnstableTask) // release

task checkStableComponentsChanged(type: CheckStableComponentsChangedTask) // pr

task createProjectConfiguration(type: CreateProjectConfigurationTask)

task incrementUnstableChangedComponents(type: IncrementUnstableChangedComponentsTask) // dev

task checkSameArtifactVersionExistsInArtifactoryTask(type: CheckSameArtifactVersionExistsInArtifactoryTask) //release

task checkSameArtifactVersionExistsInBintrayTask(type: CheckSameArtifactVersionExistsInBintrayTask) //release

task checkUnstableToStableChanged(type: CheckUnstableToStableChangedTask) // pr

task checkComponentStable(type: CheckComponentStableTask) //release

task checkVersionEqualsComponentVersion(type: CheckVersionEqualsComponentVersionTask) //release

task generateDataForPlugin(type: GenerateDataForPluginTask) //dev, project-snapshot

task incrementGlobalUnstableVersion(type: IncrementGlobalUnstableVersionTask) //dev

task incrementProjectSnapshotVersion(type: IncrementProjectSnapshotVersionTask) // project-snapshot

task checkReleaseNotesContainCurrentVersion(type: CheckReleaseNotesContainCurrentVersion) // pr, release

task checkReleaseNotesContainOnlyLatin(type: CheckReleaseNotesContainOnlyLatin) // pr, release

task checkStableArtifactsExistInArtifactoryTask(type: CheckStableArtifactsExistInArtifactoryTask) // pr

task checkStableArtifactsExistInBintrayTask(type: CheckStableArtifactsExistInBintrayTask) // pr

task setComponentAlphaCounterToZero(type: SetComponentAlphaCounterToZeroTask) // release

task checkReleaseNotesWasChangedForChangedComponent(type: CheckReleaseNotesWasChangedForChangedComponentTask) // pr

task deployComponentToMirror(type: DeployComponentToMirrorTask) // component mirror

task checkConfigurationIsProjectSnapshotTask(type: CheckConfigurationIsProjectSnapshotTask) // project-snapshot

task checkConfigurationIsOpenSourceTask(type: CheckConfigurationIsOpenSourceTask) // dev, release, pr

task generateReleaseNotesDiff(type: GenerateReleaseNotesDiffTask) // pr

task writeToFileReleaseNotesDiffForSlack(type: WriteToFileReleaseNotesDiffForSlack) //dev, project-snapshot

task writeToFileReleaseNotesDiff(type: WriteToFileReleaseNotesDiff) //dev, project-snapshot

task checkAllBintrayArtifactsVersionsAreStable(type: CheckAllBintrayArtifactsVersionsAreStableTask) // bintray

task checkAllReleaseArtifactsHaveTag(type: CheckAllReleaseArtifactsHaveTagTask) // bintray

task runCreateProjectConfigurationFromTemp(type: GradleBuild) {
    dir = file('./temp')
    tasks = ['CreateProjectConfiguration']
    doFirst {
        def pathToProject = null
        def revision = null
        if (project.hasProperty('pathToProject')) {
            pathToProject = project.findProperty('pathToProject')
        } else {
            throw new GradleException("No arguments found")
        }
        if (project.hasProperty('revision')) {
            revision = project.findProperty('revision')
        } else {
            throw new GradleException("No arguments found")
        }
        startParameter.projectProperties = [pathToProject: pathToProject, revision: revision]
    }
}