import ru.surfstudio.android.build.Components
import ru.surfstudio.android.build.tasks.*
import ru.surfstudio.android.build.tasks.artifactory_tasks.*
import ru.surfstudio.android.build.tasks.bintray_tasks.*
import ru.surfstudio.android.build.tasks.bintray_tasks.release.*
import ru.surfstudio.android.build.tasks.check_configuration.*
import ru.surfstudio.android.build.tasks.check_stable_artifacts_exist_in_repositories.*
import ru.surfstudio.android.build.tasks.check_dependencies_stable.*
import ru.surfstudio.android.build.tasks.check_release_notes.*
import ru.surfstudio.android.build.tasks.check_stability.*
import ru.surfstudio.android.build.tasks.deploy_to_mirror.*
import ru.surfstudio.android.build.tasks.generate_release_notes_diff.*
import ru.surfstudio.android.build.tasks.generate_version_file.*
import ru.surfstudio.android.build.tasks.increment_version.*

task checkComponentDependenciesAreStable(type: CheckComponentDependenciesAreStableTask) // release

task checkStableModuleDependenciesAreAlsoStable(type: CheckStableModuleDependenciesAreAlsoStableTask) // pr

task checkDependenciesArtifactExistsInArtifactory(type: CheckDependenciesArtifactExistsInArtifactoryTask) // release

task checkDependenciesArtifactExistsInBintray(type: CheckDependenciesArtifactExistsInBintrayTask) // release

task checkDependenciesForComponentAreUnstable(type: CheckDependenciesForComponentAreUnstableTask) // release

task checkStableComponentsHaveChanged(type: CheckStableComponentsHaveChangedTask) // pr

task incrementUnstableChangedComponents(type: IncrementUnstableChangedComponentsTask) // dev

task checkSameArtifactVersionExistsInArtifactory(type: CheckSameArtifactVersionExistsInArtifactoryTask) // release

task checkSameArtifactVersionExistsInBintray(type: CheckSameArtifactVersionExistsInBintrayTask) // release

task checkUnstableComponentBecameStable(type: CheckUnstableComponentBecameStableTask) // pr

task checkComponentIsStable(type: CheckComponentIsStableTask) // release

task checkPropertyVersionEqualsComponentVersion(type: CheckPropertyVersionEqualsComponentVersionTask) // release

task generateDataForPlugin(type: GenerateDataForPluginTask) // dev, project-snapshot

task incrementGlobalUnstableVersion(type: IncrementGlobalUnstableVersionTask) // dev

task generateProjectConfigurationVersionFileTask(type: GenerateProjectConfigurationVersionFileTask) //dev

task incrementGlobalUnstableVersion(type: IncrementGlobalUnstableVersionTask) //dev

task incrementProjectSnapshotVersion(type: IncrementProjectSnapshotVersionTask) // project-snapshot

task checkReleaseNotesContainCurrentVersion(type: CheckReleaseNotesContainCurrentVersionTask) // pr, release

task checkReleaseNotesContainOnlyLatin(type: CheckReleaseNotesContainOnlyLatinTask) // pr, release

task checkStableArtifactsExistInArtifactory(type: CheckStableArtifactsExistInArtifactoryTask) // pr

task checkStableArtifactsExistInBintray(type: CheckStableArtifactsExistInBintrayTask) // pr

task setComponentAlphaCounterToZero(type: SetComponentAlphaCounterToZeroTask) // release

task checkReleaseNotesWasChangedForChangedComponent(type: CheckReleaseNotesWasChangedForChangedComponentTask) // pr

task deployComponentToMirror(type: DeployComponentToMirrorTask) // component mirror

task checkConfigurationIsProjectSnapshot(type: CheckConfigurationIsProjectSnapshotTask) // project-snapshot

task checkConfigurationIsOpenSource(type: CheckConfigurationIsOpenSourceTask) // dev, release, pr

task generateReleaseNotesDiff(type: GenerateReleaseNotesDiffTask) // pr

task writeToFileReleaseNotesDiffForSlack(type: WriteToFileReleaseNotesDiffForSlack) // dev, project-snapshot

task writeToFileReleaseNotesDiff(type: WriteToFileReleaseNotesDiff) // dev, project-snapshot

task checkAllBintrayArtifactsVersionsAreStable(type: CheckAllBintrayArtifactsVersionsAreStableTask) // bintray

task checkAllReleaseArtifactsHaveTag(type: CheckAllReleaseArtifactsHaveTagTask) // bintray

task createProjectConfiguration(type: CreateProjectConfigurationTask) // currently not used

task runCreateProjectConfigurationFromTemp(type: GradleBuild) {
    dir = file('./temp')
    tasks = ['CreateProjectConfiguration']
    doFirst {
        def pathToProject = null
        def revision = null
        if (project.hasProperty('pathToProject')) {
            pathToProject = project.findProperty('pathToProject')
        } else {
            throw new GradleException("No arguments found")
        }
        if (project.hasProperty('revision')) {
            revision = project.findProperty('revision')
        } else {
            throw new GradleException("No arguments found")
        }
        startParameter.projectProperties = [pathToProject: pathToProject, revision: revision]
    }
} // currently not used