import ru.surfstudio.android.build.Components
import ru.surfstudio.android.build.GradleProperties
import ru.surfstudio.android.build.artifactory.Artifactory
import ru.surfstudio.android.build.artifactory.ArtifactoryConfig
import ru.surfstudio.android.build.Initializator
import ru.surfstudio.android.build.PublishType
import ru.surfstudio.android.build.PublishUtil

apply from: "$rootDir/buildSrc/config.gradle"
apply plugin: 'maven-publish'
apply plugin: 'signing'

String currentBuildDirectory = gradle.startParameter.currentDir.path
Initializator.init(currentBuildDirectory)

def trueValue = "true"

// license data for maven pom
def licenseName = "The Apache License, Version 2.0"
def licenseUrl = "http://www.apache.org/licenses/LICENSE-2.0"

// scm data for maven pom
def scmConnection = "scm:git:git@github.com:surfstudio/SurfAndroidStandard.git"
def scmDeveloperConnection = "scm:git:ssh://github.com:surfstudio/SurfAndroidStandard.git"
def scmUrl = "https://github.com/surfstudio/SurfAndroidStandard"

// developer data for maven pom
def developerName = "SurfStudio"
def developerMail = "mail@surfstudio.ru"
def developerOrganization = "SurfStudio LLC"
def developerOrganizationUrl = "https://surf.ru"

// Function for configuration of dependencies of current android-standard module.
// Context of current module is passed in parameters.

ext["signing.keyId"] = System.getenv("surf_maven_sign_key_id")
ext["signing.password"] = System.getenv("surf_maven_sign_password")
ext["signing.secretKeyRingFile"] = System.getenv("surf_maven_sign_key_ring_file")

ext.configureDeploy = { context ->
    // define function for deploy of current module to artifactory or maven central
    context.afterEvaluate {

        // add java source to artifacts
        task sourcesJar(type: Jar) {
            from android.sourceSets.main.java.srcDirs
        }

        def artifactName = Components.getArtifactName(project.name)
        def artifactGroupId = ArtifactoryConfig.ANDROID_STANDARD_GROUP_ID
        def artifactVersion = Components.getModuleVersion(project.name)
        def artifactDescription = Components.getArtifactDescription(project.name)
        def artifactUrl = Components.getArtifactUrl(project.name)
        def publishData = PublishUtil.initPublishData()

        if (!artifactName.trim()) {
            throw new GradleException("artifactName for ${project.name} can not be blank for deploy")
        }

        signing {
            sign publishing.publications
        }

        publishing {
            publications {
                mavenRelease(MavenPublication) {
                    // check publishType
                    if (project.hasProperty(GradleProperties.PUBLISH_TYPE)) {
                        def publishTypeProperty = project.property(GradleProperties.PUBLISH_TYPE)
                        def publishType = PublishType.getById(publishTypeProperty)
                        if (publishType == PublishType.UNKNOWN) {
                            throw new GradleException("Illegal publishType set: $publishTypeProperty")
                        }
                        publishData = PublishUtil.getPublishData(publishType)
                    }

                    // If -Pcomponent set, deploy only its artifacts
                    if (project.hasProperty(GradleProperties.COMPONENT)) {
                        def componentName = project.property(GradleProperties.COMPONENT)
                        if (!Components.isLibraryFromComponent(project.name, componentName)) return
                    }

                    // If -PonlyUnstable=true deploy only unstable artifacts
                    if (project.hasProperty(GradleProperties.DEPLOY_ONLY_UNSTABLE_COMPONENTS)) {
                        if (project.property(GradleProperties.DEPLOY_ONLY_UNSTABLE_COMPONENTS) == trueValue
                                && Components.getComponentStability(project.name)
                        ) return
                    }

                    // If -PdeployOnlyIfNotExist=true deploy only artifacts that don't exist in artifactory
                    if (project.hasProperty(GradleProperties.DEPLOY_ONLY_IF_NOT_EXIST)) {
                        if (project.property(GradleProperties.DEPLOY_ONLY_IF_NOT_EXIST) == trueValue
                                && publishType == PublishType.ARTIFACTORY
                                && Artifactory.isLibraryAlreadyDeployed(project.name)
                        ) return
                    }

                    groupId = artifactGroupId
                    artifactId = artifactName
                    version = artifactVersion

                    from components.release

                    pom {
                        name = artifactName
                        description = artifactDescription
                        url = artifactUrl

                        organization {
                            name = developerOrganization
                            url = developerOrganizationUrl
                        }

                        issueManagement {
                            system = "GitHub"
                            url = "$scmUrl/issues"
                        }

                        licenses {
                            license {
                                name = licenseName
                                url = licenseUrl
                            }
                        }

                        scm {
                            connection = scmConnection
                            developerConnection = scmDeveloperConnection
                            url = scmUrl
                        }

                        developers {
                            developer {
                                name = developerName
                                email = developerMail
                            }
                        }
                    }   // pom

                    artifact sourcesJar {
                        classifier = "sources"
                    }
                }   // mavenRelease
            }   // publications

            repositories {
                maven {
                    name = "External"
                    url = publishData.url
                    credentials {
                        username publishData.userName
                        password publishData.password
                    }
                }   // maven
            } // repositories
        } // publishing

        tasks.withType(PublishToMavenRepository) {
            doFirst {
                println("Publishing ${publication.groupId}:${publication.artifactId}:${publication.version} to ${repository.url}")
            }
        }
    }
}