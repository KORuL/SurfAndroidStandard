import ru.surfstudio.android.build.Components
import ru.surfstudio.android.build.DependencyConfigurator

apply from: "$rootDir/buildSrc/deploy.gradle"
apply from: "$rootDir/buildSrc/config.gradle"
apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

DependencyConfigurator.configure(project)

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    defaultConfig {
        minSdkVersion project.ext.libMinSdkVersion
        targetSdkVersion project.ext.targetSdkVersion
        versionCode project.ext.moduleVersionCode
        versionName Components.getModuleVersion(project.name)
        testBuildType "debug"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }

    buildTypes {
        qa {
            debuggable = true
            minifyEnabled false
        }

        release {
            minifyEnabled false
        }
    }
}

//временное решение для разрешения конфликтов версий сторонних зависимостей
configurations.all {
    resolutionStrategy.eachDependency { details ->
        if (details.requested.group == 'androidx.annotation'
                && details.requested.name.contains('annotation')) {
            details.useVersion "$androidxAnnotationVersion"
        }
        if (details.requested.group == 'androidx.core'
                && details.requested.name.contains('core')) {
            details.useVersion "$androidxCore"
        }
        if (details.requested.group == 'androidx.appcompat'
                && details.requested.name.contains('appcompat')) {
            details.useVersion "$androidxVersion"
        }
        if (details.requested.group == 'org.jetbrains'
                && details.requested.name.contains('annotations')) {
            details.useVersion "$jetbrainsAnnotationsVersion"
        }
        if (details.requested.group == 'io.reactivex.rxjava2'
                && details.requested.name.contains('rxjava')) {
            details.useVersion "$rxJava2Version"
        }
        if (details.requested.group == 'com.google.code.gson'
                && details.requested.name.contains('gson')) {
            details.useVersion "$gsonVersion"
        }
        if (details.requested.group == 'androidx.recyclerview'
                && details.requested.name.contains('recyclerview')) {
            details.useVersion "$androidxRecyclerViewVersion"
        }
    }
}

dependencies {
    DependencyConfigurator.implementation(project, "org.jetbrains.kotlin:kotlin-stdlib-jdk7")
}

//временное решение для разрешения конфликтов версий сторонних зависимостей
configurations.all {
    resolutionStrategy.eachDependency { details ->
        libraryVersions.each { libName, version ->
            if ("${details.requested.group}:${details.requested.name}" == libName) {
                details.useVersion version
            }
        }
    }
}